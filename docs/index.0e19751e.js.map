{"mappings":"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","sources":["ts/index.ts","ts/PhraseCounter.ts"],"sourcesContent":["import { PhraseCounter } from './PhraseCounter';\r\n\r\nfunction main() {\r\n    let counter = document.querySelector('#counter');\r\n    let talk = document.querySelector('#talk');\r\n    let phraseCounter = new PhraseCounter('口癖', updateCounter);\r\n    let formManager = new FormManager(phraseCounter);\r\n\r\n    function updateCounter(phrase: string, cnt: number, message?: string) {\r\n        if (!counter || !talk) return;\r\n\r\n        if (message) talk.textContent = message;\r\n        counter.textContent = cnt + '';\r\n    }\r\n\r\n    phraseCounter.start();\r\n}\r\n\r\nclass FormManager {\r\n    title: HTMLHeadingElement;\r\n    ok: HTMLButtonElement;\r\n    phrase_i: HTMLInputElement;\r\n    count_i: HTMLInputElement;\r\n    phraseCounter: PhraseCounter;\r\n    constructor(p) {\r\n        let title = document.querySelector('h1#title');\r\n        let ok = document.querySelector('#ok');\r\n        let phrase_i = document.querySelector('input#phrase-input');\r\n        let count_i = document.querySelector('input#count-input');\r\n        if (title !== null && ok !== null && phrase_i !== null && count_i !== null) {\r\n            this.phraseCounter = p;\r\n            this.title = <HTMLHeadingElement>title;\r\n            this.ok = <HTMLButtonElement>ok;\r\n            this.phrase_i = <HTMLInputElement>phrase_i;\r\n            this.count_i = <HTMLInputElement>count_i;\r\n        } else {\r\n            console.error('FormManagerの初期化に失敗しました');\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.ok.addEventListener('click', this.onSubmit);\r\n    }\r\n\r\n    onSubmit() {\r\n        console.log('ok button clicked')\r\n        let phrase = this.phrase_i.value;\r\n        let count = parseInt(this.count_i.value) || 0;\r\n        this.phraseCounter.setPhrase(phrase);\r\n        this.phraseCounter.setCount(count);\r\n        this.title.textContent = phrase.split('|')[0] + 'カウンター';\r\n    }\r\n}\r\n\r\naddEventListener('load', () => {\r\n    main();\r\n});\r\n\r\n","const MySpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\nconst MySpeechGrammarList = window.SpeechGrammarList || window.webkitSpeechGrammarList;\r\nconst MySpeechRecognitionEvent = window.SpeechRecognitionEvent || window.webkitSpeechRecognitionEvent;\r\n\r\ntype Callback = (phrase: string, count: number, message?:string) => void;\r\n\r\nexport class PhraseCounter {\r\n    //    speechRecognitionList: typeof MySpeechGrammarList;\r\n    recognition: SpeechRecognition;\r\n    recognitionList: SpeechGrammarList;\r\n    cnt: number;\r\n    running: boolean;\r\n    phrase: string;\r\n    callback?: Callback;\r\n\r\n    constructor(phrase: string, callback?:Callback) {\r\n        this.callback = callback;\r\n        this.recognition = new MySpeechRecognition();\r\n        this.recognitionList = new MySpeechGrammarList();\r\n        this.setPhrase(phrase);\r\n        this.recognition.lang = 'ja-JP';\r\n        this.recognition.interimResults = false;\r\n        this.recognition.maxAlternatives = 5;\r\n        this.recognition.onresult = this.onresult.bind(this);\r\n        this.recognition.onend = this.onend.bind(this);\r\n        this.recognition.onstart = onstart.bind(this);\r\n        this.cnt = 0;\r\n\r\n        this.start();\r\n    }\r\n\r\n    public oncountchange(count: number) {\r\n        if (this.callback) {\r\n            this.callback(this.phrase, count);\r\n        }\r\n    }    \r\n\r\n    public setPhrase(phrase: string) {\r\n        console.log('setPhrase: ' + phrase);\r\n        this.phrase = phrase;\r\n        let grammer = '#JSGF V1.0; grammar phrase; public <phrase> = ' + phrase.toLowerCase() + ';';\r\n        this.recognitionList.addFromString(grammer, 1);\r\n        this.recognition.grammars = this.recognitionList;\r\n    }\r\n\r\n    public setCount(count: number) {\r\n        if (this.cnt !== count) {\r\n            console.log('count changed: ' + count);\r\n            this.oncountchange(count);\r\n            this.cnt = count;\r\n        }\r\n    }\r\n\r\n    onresult(event) {\r\n        let tempCnt = 0 && 1;\r\n\r\n        var speechResult = event.results[0][0].transcript.toLowerCase();\r\n        console.log('result: ' + speechResult);\r\n        let re = new RegExp(this.phrase, 'gm');\r\n        let matched = speechResult.match(re);\r\n        if(matched !== null) {\r\n            let textContent = matched[0] + 'って言いました！';\r\n            tempCnt = matched.length;\r\n            console.log(textContent + this.cnt);\r\n        } else {\r\n            console.log('これは口癖ではありません');\r\n        }\r\n    \r\n        \r\n        console.log('current count: ' + this.cnt);\r\n        console.log('tempCnt: ' + tempCnt);\r\n\r\n        this.setCount(this.cnt + tempCnt);\r\n\r\n        if (this.callback) {\r\n            this.callback(this.phrase, this.cnt, speechResult);\r\n        }\r\n\r\n        console.log('話した内容: ' + speechResult);\r\n    \r\n    } \r\n\r\n    onend() {\r\n        this.running = false;\r\n        //Fired when the speech recognition service has disconnected.\r\n        console.log('SpeechRecognition.onend');\r\n        // restart speech recognition\r\n        console.log('restart recognition')\r\n        this.start();\r\n    }\r\n\r\n    start() {\r\n        if (!this.running) {\r\n            this.recognition.start();\r\n            this.running = true;\r\n        }\r\n    }\r\n}\r\n\r\n// function onspeechend() {\r\n//     recognition.stop();\r\n//     testBtn.disabled = false;\r\n// }\r\n\r\nfunction onerror(event) {\r\n    console.log('error: ' + event);\r\n}\r\n\r\nfunction onaudiostart(event) {\r\n    //Fired when the user agent has started to capture audio.\r\n    console.log('SpeechRecognition.onaudiostart');\r\n}\r\n\r\nfunction onaudioend(event) {\r\n    //Fired when the user agent has finished capturing audio.\r\n    console.log('SpeechRecognition.onaudioend');\r\n}\r\n\r\nfunction onend(event) {\r\n    //Fired when the speech recognition service has disconnected.\r\n    console.log('SpeechRecognition.onend');\r\n    // restart speech recognition\r\n    //testSpeech();\r\n}\r\n\r\nfunction onnomatch(event) {\r\n    //Fired when the speech recognition service returns a final result with no significant recognition. This may involve some degree of recognition, which doesn't meet or exceed the confidence threshold.\r\n    console.log('SpeechRecognition.onnomatch');\r\n}\r\n\r\nfunction onsoundstart(event) {\r\n    //Fired when any sound — recognisable speech or not — has been detected.\r\n    console.log('SpeechRecognition.onsoundstart');\r\n}\r\n\r\nfunction onsoundend(event) {\r\n    //Fired when any sound — recognisable speech or not — has stopped being detected.\r\n    console.log('SpeechRecognition.onsoundend');\r\n}\r\n\r\nfunction onspeechstart(event) {\r\n    //Fired when sound that is recognised by the speech recognition service as speech has been detected.\r\n    console.log('SpeechRecognition.onspeechstart');\r\n}\r\n\r\nfunction onstart(event) {\r\n    //Fired when the speech recognition service has begun listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition.\r\n    console.log('SpeechRecognition.onstart');\r\n}"],"names":[],"version":3,"file":"index.0e19751e.js.map"}