{"mappings":"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","sources":["<anon>","ts/index.ts","ts/PhraseCounter.ts"],"sourcesContent":["const $4f11a4dc1cefeaf1$var$MySpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst $4f11a4dc1cefeaf1$var$MySpeechGrammarList = window.SpeechGrammarList || window.webkitSpeechGrammarList;\nconst $4f11a4dc1cefeaf1$var$MySpeechRecognitionEvent = window.SpeechRecognitionEvent || window.webkitSpeechRecognitionEvent;\nclass $4f11a4dc1cefeaf1$export$fa72406a4d70b34a {\n    constructor(phrase, callback){\n        this.callback = callback;\n        this.recognition = new $4f11a4dc1cefeaf1$var$MySpeechRecognition();\n        this.recognitionList = new $4f11a4dc1cefeaf1$var$MySpeechGrammarList();\n        this.setPhrase(phrase);\n        this.recognition.lang = \"ja-JP\";\n        this.recognition.interimResults = false;\n        this.recognition.maxAlternatives = 5;\n        this.recognition.onresult = this.onresult.bind(this);\n        this.recognition.onend = this.onend.bind(this);\n        this.recognition.onstart = $4f11a4dc1cefeaf1$var$onstart.bind(this);\n        this.cnt = 0;\n        this.start();\n    }\n    oncountchange(count) {\n        if (this.callback) this.callback(this.phrase, count);\n    }\n    setPhrase(phrase) {\n        console.log(\"setPhrase: \" + phrase);\n        this.phrase = phrase;\n        let grammer = \"#JSGF V1.0; grammar phrase; public <phrase> = \" + phrase.toLowerCase() + \";\";\n        this.recognitionList.addFromString(grammer, 1);\n        this.recognition.grammars = this.recognitionList;\n    }\n    setCount(count) {\n        if (this.cnt !== count) {\n            console.log(\"count changed: \" + count);\n            this.oncountchange(count);\n            this.cnt = count;\n        }\n    }\n    onresult(event) {\n        let tempCnt = 0;\n        var speechResult = event.results[0][0].transcript.toLowerCase();\n        console.log(\"result: \" + speechResult);\n        let re = new RegExp(this.phrase, \"gm\");\n        let matched = speechResult.match(re);\n        if (matched !== null) {\n            let textContent = matched[0] + \"って言いました！\";\n            tempCnt = matched.length;\n            console.log(textContent + this.cnt);\n        } else console.log(\"これは口癖ではありません\");\n        console.log(\"current count: \" + this.cnt);\n        console.log(\"tempCnt: \" + tempCnt);\n        this.setCount(this.cnt + tempCnt);\n        if (this.callback) this.callback(this.phrase, this.cnt, speechResult);\n        console.log(\"話した内容: \" + speechResult);\n    }\n    onend() {\n        this.running = false;\n        //Fired when the speech recognition service has disconnected.\n        console.log(\"SpeechRecognition.onend\");\n        // restart speech recognition\n        console.log(\"restart recognition\");\n        this.start();\n    }\n    start() {\n        if (!this.running) {\n            this.recognition.start();\n            this.running = true;\n        }\n    }\n}\n// function onspeechend() {\n//     recognition.stop();\n//     testBtn.disabled = false;\n// }\nfunction $4f11a4dc1cefeaf1$var$onerror(event) {\n    console.log(\"error: \" + event);\n}\nfunction $4f11a4dc1cefeaf1$var$onaudiostart(event) {\n    //Fired when the user agent has started to capture audio.\n    console.log(\"SpeechRecognition.onaudiostart\");\n}\nfunction $4f11a4dc1cefeaf1$var$onaudioend(event) {\n    //Fired when the user agent has finished capturing audio.\n    console.log(\"SpeechRecognition.onaudioend\");\n}\nfunction $4f11a4dc1cefeaf1$var$onend(event) {\n    //Fired when the speech recognition service has disconnected.\n    console.log(\"SpeechRecognition.onend\");\n// restart speech recognition\n//testSpeech();\n}\nfunction $4f11a4dc1cefeaf1$var$onnomatch(event) {\n    //Fired when the speech recognition service returns a final result with no significant recognition. This may involve some degree of recognition, which doesn't meet or exceed the confidence threshold.\n    console.log(\"SpeechRecognition.onnomatch\");\n}\nfunction $4f11a4dc1cefeaf1$var$onsoundstart(event) {\n    //Fired when any sound — recognisable speech or not — has been detected.\n    console.log(\"SpeechRecognition.onsoundstart\");\n}\nfunction $4f11a4dc1cefeaf1$var$onsoundend(event) {\n    //Fired when any sound — recognisable speech or not — has stopped being detected.\n    console.log(\"SpeechRecognition.onsoundend\");\n}\nfunction $4f11a4dc1cefeaf1$var$onspeechstart(event) {\n    //Fired when sound that is recognised by the speech recognition service as speech has been detected.\n    console.log(\"SpeechRecognition.onspeechstart\");\n}\nfunction $4f11a4dc1cefeaf1$var$onstart(event) {\n    //Fired when the speech recognition service has begun listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition.\n    console.log(\"SpeechRecognition.onstart\");\n}\n\n\nfunction $257ba3995936ae97$var$main() {\n    let counter = document.querySelector(\"#counter\");\n    let talk = document.querySelector(\"#talk\");\n    let phraseCounter = new (0, $4f11a4dc1cefeaf1$export$fa72406a4d70b34a)(\"口癖\", updateCounter);\n    let formManager = new $257ba3995936ae97$var$FormManager(phraseCounter);\n    function updateCounter(phrase, cnt, message) {\n        if (!counter || !talk) return;\n        if (message) talk.textContent = message;\n        counter.textContent = cnt + \"\";\n    }\n    phraseCounter.start();\n}\nclass $257ba3995936ae97$var$FormManager {\n    constructor(p){\n        let title = document.querySelector(\"h1#title\");\n        let ok = document.querySelector(\"#ok\");\n        let phrase_i = document.querySelector(\"input#phrase-input\");\n        let count_i = document.querySelector(\"input#count-input\");\n        if (title !== null && ok !== null && phrase_i !== null && count_i !== null) {\n            this.phraseCounter = p;\n            this.title = title;\n            this.ok = ok;\n            this.phrase_i = phrase_i;\n            this.count_i = count_i;\n        } else console.error(\"FormManagerの初期化に失敗しました\");\n        this.onSubmit = this.onSubmit.bind(this);\n        this.ok.addEventListener(\"click\", this.onSubmit);\n    }\n    onSubmit() {\n        console.log(\"ok button clicked\");\n        let phrase = this.phrase_i.value;\n        let count = parseInt(this.count_i.value) || 0;\n        this.phraseCounter.setPhrase(phrase);\n        this.phraseCounter.setCount(count);\n        this.title.textContent = phrase.split(\"|\")[0] + \"カウンター\";\n    }\n}\naddEventListener(\"load\", ()=>{\n    $257ba3995936ae97$var$main();\n});\n\n\n//# sourceMappingURL=index.9e3caec3.js.map\n","import { PhraseCounter } from './PhraseCounter';\r\n\r\nfunction main() {\r\n    let counter = document.querySelector('#counter');\r\n    let talk = document.querySelector('#talk');\r\n    let phraseCounter = new PhraseCounter('口癖', updateCounter);\r\n    let formManager = new FormManager(phraseCounter);\r\n\r\n    function updateCounter(phrase: string, cnt: number, message?: string) {\r\n        if (!counter || !talk) return;\r\n\r\n        if (message) talk.textContent = message;\r\n        counter.textContent = cnt + '';\r\n    }\r\n\r\n    phraseCounter.start();\r\n}\r\n\r\nclass FormManager {\r\n    title: HTMLHeadingElement;\r\n    ok: HTMLButtonElement;\r\n    phrase_i: HTMLInputElement;\r\n    count_i: HTMLInputElement;\r\n    phraseCounter: PhraseCounter;\r\n    constructor(p) {\r\n        let title = document.querySelector('h1#title');\r\n        let ok = document.querySelector('#ok');\r\n        let phrase_i = document.querySelector('input#phrase-input');\r\n        let count_i = document.querySelector('input#count-input');\r\n        if (title !== null && ok !== null && phrase_i !== null && count_i !== null) {\r\n            this.phraseCounter = p;\r\n            this.title = <HTMLHeadingElement>title;\r\n            this.ok = <HTMLButtonElement>ok;\r\n            this.phrase_i = <HTMLInputElement>phrase_i;\r\n            this.count_i = <HTMLInputElement>count_i;\r\n        } else {\r\n            console.error('FormManagerの初期化に失敗しました');\r\n        }\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.ok.addEventListener('click', this.onSubmit);\r\n    }\r\n\r\n    onSubmit() {\r\n        console.log('ok button clicked')\r\n        let phrase = this.phrase_i.value;\r\n        let count = parseInt(this.count_i.value) || 0;\r\n        this.phraseCounter.setPhrase(phrase);\r\n        this.phraseCounter.setCount(count);\r\n        this.title.textContent = phrase.split('|')[0] + 'カウンター';\r\n    }\r\n}\r\n\r\naddEventListener('load', () => {\r\n    main();\r\n});\r\n\r\n","const MySpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\nconst MySpeechGrammarList = window.SpeechGrammarList || window.webkitSpeechGrammarList;\r\nconst MySpeechRecognitionEvent = window.SpeechRecognitionEvent || window.webkitSpeechRecognitionEvent;\r\n\r\ntype Callback = (phrase: string, count: number, message?:string) => void;\r\n\r\nexport class PhraseCounter {\r\n    //    speechRecognitionList: typeof MySpeechGrammarList;\r\n    recognition: SpeechRecognition;\r\n    recognitionList: SpeechGrammarList;\r\n    cnt: number;\r\n    running: boolean;\r\n    phrase: string;\r\n    callback?: Callback;\r\n\r\n    constructor(phrase: string, callback?:Callback) {\r\n        this.callback = callback;\r\n        this.recognition = new MySpeechRecognition();\r\n        this.recognitionList = new MySpeechGrammarList();\r\n        this.setPhrase(phrase);\r\n        this.recognition.lang = 'ja-JP';\r\n        this.recognition.interimResults = false;\r\n        this.recognition.maxAlternatives = 5;\r\n        this.recognition.onresult = this.onresult.bind(this);\r\n        this.recognition.onend = this.onend.bind(this);\r\n        this.recognition.onstart = onstart.bind(this);\r\n        this.cnt = 0;\r\n\r\n        this.start();\r\n    }\r\n\r\n    public oncountchange(count: number) {\r\n        if (this.callback) {\r\n            this.callback(this.phrase, count);\r\n        }\r\n    }    \r\n\r\n    public setPhrase(phrase: string) {\r\n        console.log('setPhrase: ' + phrase);\r\n        this.phrase = phrase;\r\n        let grammer = '#JSGF V1.0; grammar phrase; public <phrase> = ' + phrase.toLowerCase() + ';';\r\n        this.recognitionList.addFromString(grammer, 1);\r\n        this.recognition.grammars = this.recognitionList;\r\n    }\r\n\r\n    public setCount(count: number) {\r\n        if (this.cnt !== count) {\r\n            console.log('count changed: ' + count);\r\n            this.oncountchange(count);\r\n            this.cnt = count;\r\n        }\r\n    }\r\n\r\n    onresult(event) {\r\n        let tempCnt = 0 && 1;\r\n\r\n        var speechResult = event.results[0][0].transcript.toLowerCase();\r\n        console.log('result: ' + speechResult);\r\n        let re = new RegExp(this.phrase, 'gm');\r\n        let matched = speechResult.match(re);\r\n        if(matched !== null) {\r\n            let textContent = matched[0] + 'って言いました！';\r\n            tempCnt = matched.length;\r\n            console.log(textContent + this.cnt);\r\n        } else {\r\n            console.log('これは口癖ではありません');\r\n        }\r\n    \r\n        \r\n        console.log('current count: ' + this.cnt);\r\n        console.log('tempCnt: ' + tempCnt);\r\n\r\n        this.setCount(this.cnt + tempCnt);\r\n\r\n        if (this.callback) {\r\n            this.callback(this.phrase, this.cnt, speechResult);\r\n        }\r\n\r\n        console.log('話した内容: ' + speechResult);\r\n    \r\n    } \r\n\r\n    onend() {\r\n        this.running = false;\r\n        //Fired when the speech recognition service has disconnected.\r\n        console.log('SpeechRecognition.onend');\r\n        // restart speech recognition\r\n        console.log('restart recognition')\r\n        this.start();\r\n    }\r\n\r\n    start() {\r\n        if (!this.running) {\r\n            this.recognition.start();\r\n            this.running = true;\r\n        }\r\n    }\r\n}\r\n\r\n// function onspeechend() {\r\n//     recognition.stop();\r\n//     testBtn.disabled = false;\r\n// }\r\n\r\nfunction onerror(event) {\r\n    console.log('error: ' + event);\r\n}\r\n\r\nfunction onaudiostart(event) {\r\n    //Fired when the user agent has started to capture audio.\r\n    console.log('SpeechRecognition.onaudiostart');\r\n}\r\n\r\nfunction onaudioend(event) {\r\n    //Fired when the user agent has finished capturing audio.\r\n    console.log('SpeechRecognition.onaudioend');\r\n}\r\n\r\nfunction onend(event) {\r\n    //Fired when the speech recognition service has disconnected.\r\n    console.log('SpeechRecognition.onend');\r\n    // restart speech recognition\r\n    //testSpeech();\r\n}\r\n\r\nfunction onnomatch(event) {\r\n    //Fired when the speech recognition service returns a final result with no significant recognition. This may involve some degree of recognition, which doesn't meet or exceed the confidence threshold.\r\n    console.log('SpeechRecognition.onnomatch');\r\n}\r\n\r\nfunction onsoundstart(event) {\r\n    //Fired when any sound — recognisable speech or not — has been detected.\r\n    console.log('SpeechRecognition.onsoundstart');\r\n}\r\n\r\nfunction onsoundend(event) {\r\n    //Fired when any sound — recognisable speech or not — has stopped being detected.\r\n    console.log('SpeechRecognition.onsoundend');\r\n}\r\n\r\nfunction onspeechstart(event) {\r\n    //Fired when sound that is recognised by the speech recognition service as speech has been detected.\r\n    console.log('SpeechRecognition.onspeechstart');\r\n}\r\n\r\nfunction onstart(event) {\r\n    //Fired when the speech recognition service has begun listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition.\r\n    console.log('SpeechRecognition.onstart');\r\n}"],"names":["$4f11a4dc1cefeaf1$var$MySpeechRecognition","window","SpeechRecognition","webkitSpeechRecognition","$4f11a4dc1cefeaf1$var$MySpeechGrammarList","SpeechGrammarList","webkitSpeechGrammarList","SpeechRecognitionEvent","webkitSpeechRecognitionEvent","$4f11a4dc1cefeaf1$export$fa72406a4d70b34a","constructor","phrase","callback","recognition","recognitionList","setPhrase","lang","interimResults","maxAlternatives","onresult","bind","onend","onstart","$4f11a4dc1cefeaf1$var$onstart","cnt","start","oncountchange","count","console","log","grammer","toLowerCase","addFromString","grammars","setCount","event","tempCnt","speechResult","results","transcript","re","RegExp","matched","match","textContent","length","running","$257ba3995936ae97$var$FormManager","p","title","document","querySelector","ok","phrase_i","count_i","phraseCounter","error","onSubmit","addEventListener","value","parseInt","split","counter","talk","message"],"version":3,"file":"index.9e3caec3.js.map"}